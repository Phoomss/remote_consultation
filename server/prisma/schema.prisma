generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  OFFICER
  PHYSICIAN
}

enum BookingType {
  bloodTest
  consult
}

enum CaseStatus {
  accepted
  notAccepting
}

model Content {
  id           Int      @id @default(autoincrement())
  content_name String
  createdAt    DateTime @default(now())

  Content_Detail Content_Detail[]

  @@map("contents")
}

model Content_Detail {
  id        Int      @id @default(autoincrement())
  contentId Int
  detail    String   @db.Text
  createdAt DateTime @default(now())

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("content_details")
}

model User {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(10)
  full_name String
  age       Int
  phone     String   @unique @db.VarChar(10)
  username  String   @unique @db.VarChar(100)
  password  String
  role      Role
  createdAt DateTime @default(now())

  Case_officer   Case[]     @relation("OfficerCases")
  Case_physician Case[]     @relation("PhysicianCases")
  Booking        Booking[]
  Response       Response[]

  @@map("users")
}

model Booking {
  id             Int         @id @default(autoincrement())
  userId         Int
  booking_type   BookingType
  booking_detail String      @db.Text
  appointment    DateTime    @default(now())
  createdAt      DateTime    @default(now())

  Case Case[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Case {
  id          Int        @id @default(autoincrement())
  bookingId   Int
  officerId   Int
  physicianId Int
  case_status CaseStatus
  createdAt   DateTime   @default(now())

  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  officer   User    @relation("OfficerCases", fields: [officerId], references: [id], onDelete: Cascade)
  physician User    @relation("PhysicianCases", fields: [physicianId], references: [id], onDelete: Cascade)

  @@map("cases")
}

model Question {
  id        Int        @id @default(autoincrement())
  ques_name String     @unique
  createdAt DateTime   @default(now())
  Answer    Answer[]
  Response  Response[]

  @@map("questions")
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  anwer_text String   @db.Text
  createdAt  DateTime @default(now())

  question Question   @relation(fields: [questionId], references: [id])
  Response Response[]

  @@map("answers")
}

model Response {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  answerId   Int
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
  answer   Answer   @relation(fields: [answerId], references: [id])

  @@map("responses")
}
